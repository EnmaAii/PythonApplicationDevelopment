import re
from functools import lru_cache
from typing import BinaryIO, Optional, Sequence
from collections import defaultdict
import logging

# Добавляем логирование
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class FileRepositoryCachingDecorator:
    def __init__(self, file_repository: object, maxsize: int = 128,  cache_get_all_files: bool = True):
        """
        Инициализирует декоратор.

        Args:
            file_repository: Объект, реализующий интерфейс IFileRepository.
            maxsize: Максимальный размер кэша для метода open_file.
            cache_get_all_files: Флаг, указывающий, нужно ли кэшировать метод get_all_file_names (по умолчанию - True)
        """
        self._file_repository = file_repository
        self._open_file_cache = lru_cache(maxsize=maxsize)(self._open_file_cached)
        self._all_file_names_cache = defaultdict(lambda: None)  # Кэширование для get_all_file_names
        self.cache_get_all_files = cache_get_all_files

    def get_all_file_names(self) -> Sequence[str]:
        """Возвращает список имен файлов."""
        if self.cache_get_all_files and self._all_file_names_cache[(None,)] is not None:
            logger.info("Возвращаем данные из кэша get_all_file_names")
            return self._all_file_names_cache[(None,)]

        result = self._file_repository.get_all_file_names()
        self._all_file_names_cache[(None,)] = result
        logger.info("Запись данных в кэш get_all_file_names")
        return result

    @lru_cache(maxsize=None) #maxsize=None для неограниченного размера кэша для метода open_file
    def _open_file_cached(self, unsafe_file_name: str) -> BinaryIO:
        """Открывает файл и возвращает поток."""
        logger.info(f"Открытие файла {unsafe_file_name}")
        return self._file_repository.open_file(unsafe_file_name)


    def open_file(self, unsafe_file_name: str) -> BinaryIO:
        """Открывает файл (использует кэшированный метод)."""
        return self._open_file_cached(unsafe_file_name)


    def save_file(self, unsafe_file_name: str, file_contents: BinaryIO):
        self._clear_caches()
        return self._file_repository.save_file(unsafe_file_name, file_contents)

    def delete_file(self, unsafe_file_name: str):
        self._clear_caches()
        return self._file_repository.delete_file(unsafe_file_name)

    def delete_files_by_regex(self, file_name_regex: re.Pattern):
        self._clear_caches()
        return self._file_repository.delete_files_by_regex(file_name_regex)

    def delete_all_files(self):
        self._clear_caches()
        return self._file_repository.delete_all_files()


    def _clear_caches(self):
        """Очищает кэши."""
        self._open_file_cache.cache_clear()
        self._all_file_names_cache.clear()
        logger.info("Кэши очищены")


#Пример использования (для демонстрации)
# Предполагаем, что у вас есть класс IFileRepository
class MyFileRepository:
    def get_all_file_names(self) -> Sequence[str]:
        return ["file1.txt", "file2.txt"]
    def open_file(self, unsafe_file_name: str) -> BinaryIO:
        return open(unsafe_file_name, "rb")
    # ... другие методы


file_repo = MyFileRepository()
cached_repo = FileRepositoryCachingDecorator(file_repo, maxsize=10)

# Пример использования
file_list = cached_repo.get_all_file_names()
print(file_list)
file_handle = cached_repo.open_file("file1.txt")
file_handle.close()
